Implement Supabase Authentication for Candidate Signup/Login
Context
The candidate signup system is currently bypassing Supabase Authentication. Users are being stored in a custom candidates table but not appearing in the Supabase Auth dashboard. We need to integrate properly with Supabase Auth so candidates appear in both the Authentication dashboard and the candidates table.

Step 1: Add Environment Variable
First, add the Supabase Service Role Key to your .env.local file:

bash
# Add this line to .env.local
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndybWZseHRoZHRmZmluemN1bmxmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMDk5MzgwMCwiZXhwIjoyMDQ2NTY5ODAwfQ.U_3vFyqNPcgI7P3LTdMvADqPgwYdkYQ6Q-wY6vOCQHA
Note: Get this key from Supabase Dashboard → Settings → API → Service role key (secret)

Step 2: Install Required Packages
Install the Supabase client library:

bash
npm install @supabase/supabase-js
Step 3: Update Candidate Signup API Route
Replace the entire contents of /app/api/auth/candidate-signup/route.ts with:

typescript
import { createClient } from '@supabase/supabase-js';
import { NextResponse } from 'next/server';

// Initialize Supabase Admin client for server-side operations
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { firstName, lastName, email, mobileNumber, password } = body;

    console.log('Creating Supabase Auth user for:', email);

    // Step 1: Create user in Supabase Auth
    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({
      email,
      password,
      email_confirm: true, // Auto-confirm email for testing
      user_metadata: {
        first_name: firstName,
        last_name: lastName,
        mobile_number: mobileNumber,
        user_type: 'candidate'
      }
    });

    if (authError) {
      console.error('Supabase auth error:', authError);
      return NextResponse.json(
        { error: authError.message },
        { status: 400 }
      );
    }

    if (!authData.user) {
      return NextResponse.json(
        { error: 'Failed to create user account' },
        { status: 500 }
      );
    }

    console.log('Auth user created with ID:', authData.user.id);

    // Step 2: Create candidate profile in the candidates table
    const { error: dbError } = await supabaseAdmin
      .from('candidates')
      .insert({
        id: authData.user.id, // Use the Supabase Auth UUID
        first_name: firstName,
        last_name: lastName,
        email,
        mobile_number: mobileNumber,
        phone: mobileNumber, // Also set phone field if it exists
      });

    if (dbError) {
      // If database insert fails, clean up the auth user
      await supabaseAdmin.auth.admin.deleteUser(authData.user.id);
      console.error('Database error:', dbError);
      return NextResponse.json(
        { error: 'Failed to create candidate profile: ' + dbError.message },
        { status: 500 }
      );
    }

    console.log('Candidate profile created successfully');

    return NextResponse.json({
      success: true,
      message: 'Account created successfully! You can now log in.',
      candidateId: authData.user.id
    });
  } catch (error) {
    console.error('Candidate creation error:', error);
    return NextResponse.json(
      { error: 'Failed to create account: ' + (error as Error).message },
      { status: 500 }
    );
  }
}
Step 4: Update Candidate Login API Route
Replace the entire contents of /app/api/auth/candidate-login/route.ts with:

typescript
import { createClient } from '@supabase/supabase-js';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { email, password } = body;

    console.log('Attempting login for:', email);

    // Sign in with Supabase Auth
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    if (error) {
      console.error('Login error:', error);
      return NextResponse.json(
        { error: 'Invalid email or password' },
        { status: 401 }
      );
    }

    if (!data.user) {
      return NextResponse.json(
        { error: 'Login failed - no user data' },
        { status: 401 }
      );
    }

    // Check if user is a candidate
    if (data.user.user_metadata?.user_type !== 'candidate') {
      await supabase.auth.signOut();
      return NextResponse.json(
        { error: 'This account is not registered as a candidate' },
        { status: 403 }
      );
    }

    console.log('Login successful for user:', data.user.id);

    // Get candidate profile from database
    const { data: candidate, error: candidateError } = await supabase
      .from('candidates')
      .select('*')
      .eq('id', data.user.id)
      .single();

    if (candidateError) {
      console.error('Error fetching candidate profile:', candidateError);
    }

    // Set session cookie for client-side auth
    const response = NextResponse.json({
      success: true,
      message: 'Login successful',
      user: {
        id: data.user.id,
        email: data.user.email,
        firstName: candidate?.first_name || data.user.user_metadata?.first_name,
        lastName: candidate?.last_name || data.user.user_metadata?.last_name
      },
      redirectTo: '/candidate-dashboard'
    });

    // Set auth cookies if session exists
    if (data.session) {
      response.cookies.set('access-token', data.session.access_token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 60 * 60 * 24 * 7 // 1 week
      });
    }

    return response;
  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { error: 'Login failed: ' + (error as Error).message },
      { status: 500 }
    );
  }
}
Step 5: Update Candidate Signup Page Success Handling
In /app/(auth)/candidate-signup/page.tsx, update the success message handling in the handleSubmit function:

typescript
// Find the handleSubmit function and update the success handling part:
if (response.ok) {
  setError('');
  setSuccess('Account created successfully! Redirecting to login...');
  
  // Clear form
  setFirstName('');
  setLastName('');
  setEmail('');
  setMobileNumber('');
  setPassword('');
  setConfirmPassword('');
  
  // Redirect to login after 2 seconds
  setTimeout(() => {
    router.push('/candidate-login');
  }, 2000);
} else {
  setError(data.error || 'Failed to create account');
  setSuccess('');
}
Step 6: Update Candidate Login Page Success Handling
In /app/(auth)/candidate-login/page.tsx, ensure the login success redirects properly:

typescript
// In the handleSubmit function, update the success handling:
if (response.ok) {
  setError('');
  console.log('Login successful, redirecting...');
  
  // Redirect to dashboard
  router.push(data.redirectTo || '/candidate-dashboard');
} else {
  setError(data.error || 'Login failed');
}
Step 7: Restart the Application
After making all these changes, restart the Next.js development server:

bash
npm run dev
Step 8: Test the Complete Flow
Test Signup:
Navigate to /candidate-signup
Fill in the form with a NEW email address (not previously used)
Use a strong password (minimum 8 characters)
Submit the form
You should see "Account created successfully!"
Verify in Supabase:
Go to your Supabase Dashboard
Navigate to Authentication → Users
The new candidate should appear there with their email
Check Table Editor → candidates
The candidate should also appear there with the same ID
Test Login:
Navigate to /candidate-login
Enter the email and password you just created
Submit the form
You should be redirected to /candidate-dashboard
Important Notes
Email Confirmation: The code sets email_confirm: true to auto-confirm emails for testing. In production, set this to false and implement proper email verification.
Service Role Key Security: The service role key should NEVER be exposed on the client side. It's only used in API routes (server-side).
Console Logs: The code includes console.log statements for debugging. Check the terminal/console for any error messages.
Database Columns: Make sure the candidates table has these columns:
id (UUID, primary key)
first_name (text)
last_name (text)
email (text, unique)
mobile_number (text)
phone (text) - if this column exists
Troubleshooting
If users don't appear in Supabase Auth:

Check that SUPABASE_SERVICE_ROLE_KEY is correctly set in .env.local
Verify the key starts with eyJ and is the service role key, not the anon key
Check console for error messages
Make sure you restarted the dev server after adding the env variable
If you get "Failed to create candidate profile":

Check that the candidates table exists
Verify column names match (first_name, last_name, email, mobile_number)
Check that the ID column accepts UUIDs
Look at the detailed error message in the response
Success Indicators
✅ New users appear in Supabase Authentication → Users
✅ Candidates also appear in the candidates table
✅ Both have the same UUID
✅ Login works and redirects to dashboard
✅ No more "password_hash column not found" errors

